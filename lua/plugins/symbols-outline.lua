local M = {
  "simrat39/symbols-outline.nvim",
  cmd = "SymbolsOutline",
}

function M.config()
  local icons = require("icons")
  require("symbols-outline").setup({
    highlight_hovered_item = true,
    show_guides = true,
    auto_preview = true,
    position = "right",
    relative_width = true,
    width = 25,
    auto_close = false,
    show_numbers = false,
    show_relative_numbers = false,
    show_symbol_details = true,
    preview_bg_highlight = "Pmenu",
    autofold_depth = nil,
    auto_unfold_hover = true,
    fold_markers = { "ðŸ¡¹", "ðŸ¡»" },
    keymaps = { -- These keymaps can be a string or a table for multiple keys
      close = { "<Esc>", "K" },
      goto_location = "<Cr>",
      focus_location = "o",
      hover_symbol = "M",
      toggle_preview = "<C-space>",
      rename_symbol = "r",
      code_actions = "a",
      fold = "h",
      unfold = "l",
      fold_all = "W",
      unfold_all = "E",
      fold_reset = "R",
    },
    lsp_blacklist = {},
    symbol_blacklist = {},
    symbols = {
      File = { icon = icons.code.File, hl = "TSURI" },
      Module = { icon = icons.code.Module, hl = "TSNamespace" },
      Namespace = { icon = icons.code.Namespace, hl = "TSNamespace" },
      Package = { icon = icons.code.Package, hl = "TSNamespace" },
      Class = { icon = icons.code.Class, hl = "TSType" },
      Method = { icon = icons.code.Method, hl = "TSMethod" },
      Property = { icon = icons.code.Property, hl = "TSMethod" },
      Field = { icon = icons.code.Field, hl = "TSField" },
      Constructor = { icon = icons.code.Constructor, hl = "TSConstructor" },
      Enum = { icon = icons.code.Enum, hl = "TSType" },
      Interface = { icon = icons.code.Interface, hl = "TSType" },
      Function = { icon = icons.code.Function, hl = "TSFunction" },
      Variable = { icon = icons.code.Variable, hl = "TSConstant" },
      Constant = { icon = icons.code.Constant, hl = "TSConstant" },
      String = { icon = icons.code.String, hl = "TSString" },
      Number = { icon = icons.code.Number, hl = "TSNumber" },
      Boolean = { icon = icons.code.Boolean, hl = "TSBoolean" },
      Array = { icon = icons.code.Array, hl = "TSConstant" },
      Object = { icon = icons.code.Object, hl = "TSType" },
      Key = { icon = icons.code.Key, hl = "TSType" },
      Null = { icon = icons.code.Null, hl = "TSType" },
      EnumMember = { icon = icons.code.EnumMember, hl = "TSField" },
      Struct = { icon = icons.code.Struct, hl = "TSType" },
      Event = { icon = icons.code.Event, hl = "TSType" },
      Operator = { icon = icons.code.Operator, hl = "TSOperator" },
      TypeParameter = { icon = icons.code.TypeParameter, hl = "TSParameter" },
    },
  })
end

return M
